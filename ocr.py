import base64
import urllib
import requests
import logging
import ddddocr

dddd_ocr = ddddocr.DdddOcr()

def ocr_dddd(img_base64: str):
    img_bytes = base64.b64decode(img_base64)
    # with open('output_image.png', 'wb') as image_file:
    #     image_file.write(img_bytes)
    result = dddd_ocr.classification(img_bytes)
    logging.info(f"识别验证码: {result}")
    return result

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    b = "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"

    # b = urllib.parse.quote_plus(b)
    # rsp = ocr(b)
    # logging.info(rsp)

    ocr_dddd(b)